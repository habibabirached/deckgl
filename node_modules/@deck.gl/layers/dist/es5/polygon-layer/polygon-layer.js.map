{"version":3,"sources":["../../../src/polygon-layer/polygon-layer.js"],"names":["defaultLineColor","defaultFillColor","defaultProps","stroked","filled","extruded","elevationScale","wireframe","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","lineDashJustified","fp64","getPolygon","type","value","f","polygon","getFillColor","getLineColor","getLineWidth","getLineDashArray","getElevation","lightSettings","PolygonLayer","state","paths","oldProps","props","changeFlags","geometryChanged","dataChanged","updateTriggersChanged","all","data","object","complexPolygon","Polygon","normalize","forEach","push","path","info","Object","assign","accessor","x","transitions","updateTriggers","hasData","length","polygonLayer","SolidPolygonLayer","getSubLayerProps","id","polygonLineLayer","PathLayer","getWidth","getColor","getDashArray","widthScale","widthMinPixels","widthMaxPixels","rounded","miterLimit","dashJustified","getPath","_getAccessor","CompositeLayer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer} from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\n\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\n\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n  lineDashJustified: false,\n  fp64: false,\n\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point, line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Line dash array accessor\n  getLineDashArray: {type: 'accessor', value: [0, 0]},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n\n  // Optional settings for 'lighting' shader module\n  lightSettings: {}\n};\n\nexport default class PolygonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      paths: []\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    if (geometryChanged) {\n      const {data, getPolygon} = this.props;\n      this.state.paths = [];\n      for (const object of data) {\n        const complexPolygon = Polygon.normalize(getPolygon(object));\n        complexPolygon.forEach(polygon =>\n          this.state.paths.push({\n            path: polygon,\n            object\n          })\n        );\n      }\n    }\n  }\n\n  getPickingInfo({info}) {\n    return Object.assign(info, {\n      // override object with picked data\n      object: (info.object && info.object.object) || info.object\n    });\n  }\n\n  _getAccessor(accessor) {\n    if (typeof accessor === 'function') {\n      return x => accessor(x.object);\n    }\n    return accessor;\n  }\n\n  /* eslint-disable complexity */\n  renderLayers() {\n    // Layer composition props\n    const {data, stroked, filled, extruded, wireframe, elevationScale, transitions} = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      fp64\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      getPolygon,\n      updateTriggers,\n      lightSettings\n    } = this.props;\n\n    const {paths} = this.state;\n\n    const hasData = paths.length > 0;\n\n    // Filled Polygon Layer\n    const polygonLayer =\n      hasData &&\n      new SolidPolygonLayer(\n        this.getSubLayerProps({\n          id: 'fill',\n          updateTriggers: {\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data,\n          extruded,\n          elevationScale,\n\n          fp64,\n          filled,\n          wireframe,\n\n          getPolygon,\n          getElevation,\n          getFillColor,\n          getLineColor,\n\n          lightSettings,\n          transitions\n        }\n      );\n\n    // Polygon line layer\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      hasData &&\n      new PathLayer(\n        this.getSubLayerProps({\n          id: 'stroke',\n          updateTriggers: {\n            getWidth: updateTriggers.getLineWidth,\n            getColor: updateTriggers.getLineColor,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: paths,\n\n          fp64,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          transitions: transitions && {\n            getWidth: transitions.getLineWidth,\n            getColor: transitions.getLineColor,\n            getPath: transitions.getPolygon\n          },\n\n          getPath: x => x.path,\n          getColor: this._getAccessor(getLineColor),\n          getWidth: this._getAccessor(getLineWidth),\n          getDashArray: this._getAccessor(getLineDashArray)\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonLayer,\n      polygonLineLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n\nPolygonLayer.layerName = 'PolygonLayer';\nPolygonLayer.defaultProps = defaultProps;\n"],"file":"polygon-layer.js"}