{"version":3,"sources":["../../../src/contour-layer/contour-layer.js"],"names":["CompositeLayer","_GPUGridAggregator","GPUGridAggregator","_pointToDensityGridData","pointToDensityGridData","LineLayer","generateContours","DEFAULT_COLOR","DEFAULT_STROKE_WIDTH","DEFAULT_THRESHOLD","defaultProps","cellSize","type","min","max","value","getPosition","x","position","contours","threshold","fp64","ContourLayer","initializeState","gl","context","options","id","shaderCache","state","contourData","gridAggregator","updateState","oldProps","props","changeFlags","contoursDirty","aggregationFlags","getAggregationFlags","setState","countsData","aggregateData","rebuildContours","getSubLayerClass","getSubLayerProps","data","getSourcePosition","d","start","getTargetPosition","end","getColor","onGetSublayerColor","bind","getStrokeWidth","onGetSublayerStrokeWidth","renderLayers","SubLayerClass","cellSizeMeters","gpuAggregation","coordinateSystem","gpuGridAggregator","viewport","boundingBox","countsBuffer","gridSize","gridOrigin","getData","getCellData","cellWeights","thresholds","map","dataChanged","updateTriggersChanged","all","Object","assign","cellSizeChanged","segment","color","forEach","strokeWidth","some","contour","length","oldThresholds","_","i","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  CompositeLayer,\n  _GPUGridAggregator as GPUGridAggregator,\n  _pointToDensityGridData as pointToDensityGridData\n} from '@deck.gl/core';\nimport {LineLayer} from '@deck.gl/layers';\n\nimport {generateContours} from './contour-utils';\n\nconst DEFAULT_COLOR = [255, 255, 255];\nconst DEFAULT_STROKE_WIDTH = 1;\nconst DEFAULT_THRESHOLD = 1;\n\nconst defaultProps = {\n  // grid aggregation\n  cellSize: {type: 'number', min: 1, max: 1000, value: 1000},\n  getPosition: {type: 'accessor', value: x => x.position},\n\n  // contour lines\n  contours: [{threshold: DEFAULT_THRESHOLD}],\n\n  fp64: false\n};\n\nexport default class ContourLayer extends CompositeLayer {\n  initializeState() {\n    const {gl} = this.context;\n    const options = {\n      id: `${this.id}-gpu-aggregator`,\n      shaderCache: this.context.shaderCache\n    };\n    this.state = {\n      contourData: [],\n      gridAggregator: new GPUGridAggregator(gl, options)\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    let contoursDirty = false;\n    const aggregationFlags = this.getAggregationFlags({oldProps, props, changeFlags});\n    if (aggregationFlags) {\n      contoursDirty = true;\n      // Clear countsData cache\n      this.setState({countsData: null});\n      this.aggregateData(aggregationFlags);\n    }\n\n    contoursDirty = contoursDirty || this.rebuildContours({oldProps, props});\n    if (contoursDirty) {\n      this.generateContours();\n    }\n  }\n\n  getSubLayerClass() {\n    return LineLayer;\n  }\n\n  getSubLayerProps() {\n    const {fp64} = this.props;\n\n    return super.getSubLayerProps({\n      id: 'contour-line-layer',\n      data: this.state.contourData,\n      fp64,\n      getSourcePosition: d => d.start,\n      getTargetPosition: d => d.end,\n      getColor: this.onGetSublayerColor.bind(this),\n      getStrokeWidth: this.onGetSublayerStrokeWidth.bind(this)\n    });\n  }\n\n  renderLayers() {\n    const SubLayerClass = this.getSubLayerClass();\n\n    return new SubLayerClass(this.getSubLayerProps());\n  }\n\n  // Private\n\n  aggregateData(aggregationFlags) {\n    const {\n      data,\n      cellSize: cellSizeMeters,\n      getPosition,\n      gpuAggregation,\n      fp64,\n      coordinateSystem\n    } = this.props;\n    const {\n      countsData,\n      countsBuffer,\n      gridSize,\n      gridOrigin,\n      cellSize,\n      boundingBox\n    } = pointToDensityGridData({\n      data,\n      cellSizeMeters,\n      getPosition,\n      gpuAggregation,\n      gpuGridAggregator: this.state.gridAggregator,\n      fp64,\n      coordinateSystem,\n      viewport: this.context.viewport,\n      boundingBox: this.state.boundingBox, // avoid parsing data when it is not changed.\n      aggregationFlags\n    });\n\n    this.setState({countsData, countsBuffer, gridSize, gridOrigin, cellSize, boundingBox});\n  }\n\n  generateContours() {\n    const {gridSize, gridOrigin, cellSize} = this.state;\n    let {countsData} = this.state;\n    if (!countsData) {\n      const {countsBuffer} = this.state;\n      countsData = countsBuffer.getData();\n      this.setState({countsData});\n    }\n\n    const {cellWeights} = GPUGridAggregator.getCellData({countsData});\n    const thresholds = this.props.contours.map(x => x.threshold);\n    const contourData = generateContours({\n      thresholds,\n      cellWeights,\n      gridSize,\n      gridOrigin,\n      cellSize\n    });\n\n    this.setState({contourData});\n  }\n\n  getAggregationFlags({oldProps, props, changeFlags}) {\n    let aggregationFlags = null;\n    if (\n      changeFlags.dataChanged ||\n      oldProps.gpuAggregation !== props.gpuAggregation ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPosition))\n    ) {\n      aggregationFlags = Object.assign({}, aggregationFlags, {dataChanged: true});\n    }\n    if (oldProps.cellSize !== props.cellSize) {\n      aggregationFlags = Object.assign({}, aggregationFlags, {cellSizeChanged: true});\n    }\n    return aggregationFlags;\n  }\n\n  onGetSublayerColor(segment) {\n    const {contours} = this.props;\n    let color = DEFAULT_COLOR;\n    contours.forEach(data => {\n      if (data.threshold === segment.threshold) {\n        color = data.color || DEFAULT_COLOR;\n      }\n    });\n    return color;\n  }\n\n  onGetSublayerStrokeWidth(segment) {\n    const {contours} = this.props;\n    let strokeWidth = DEFAULT_STROKE_WIDTH;\n    // Linearly searches the contours, but there should only be few contours\n    contours.some(contour => {\n      if (contour.threshold === segment.threshold) {\n        strokeWidth = contour.strokeWidth || DEFAULT_STROKE_WIDTH;\n        return true;\n      }\n      return false;\n    });\n    return strokeWidth;\n  }\n\n  rebuildContours({oldProps, props}) {\n    if (oldProps.contours.length !== props.contours.length) {\n      return true;\n    }\n    const oldThresholds = oldProps.contours.map(x => x.threshold);\n    const thresholds = props.contours.map(x => x.threshold);\n\n    return thresholds.some((_, i) => thresholds[i] !== oldThresholds[i]);\n  }\n}\n\nContourLayer.layerName = 'ContourLayer';\nContourLayer.defaultProps = defaultProps;\n"],"file":"contour-layer.js"}