{"version":3,"sources":["../../../src/solid-polygon-layer/solid-polygon-layer.js"],"names":["Layer","GL","Model","Geometry","hasFeature","FEATURES","PolygonTesselator","vs","fs","DEFAULT_COLOR","defaultProps","filled","extruded","wireframe","fp64","elevationScale","type","min","value","getPolygon","f","polygon","getElevation","getFillColor","getLineColor","lightSettings","ATTRIBUTE_TRANSITION","enter","chunk","length","subarray","SolidPolygonLayer","getShaders","projectModule","use64bitProjection","modules","initializeState","gl","context","setState","numInstances","IndexType","ELEMENT_INDEX_UINT32","Uint32Array","Uint16Array","attributeManager","getAttributeManager","noAlloc","remove","add","indices","size","isIndexed","update","calculateIndices","positions","transition","accessor","calculatePositions","positions64xyLow","calculatePositionsLow","vertexValid","UNSIGNED_BYTE","calculateVertexValid","elevations","calculateElevations","fillColors","alias","calculateFillColors","defaultValue","lineColors","calculateLineColors","pickingColors","calculatePickingColors","draw","uniforms","props","state","topModel","sideModel","renderUniforms","Object","assign","Boolean","setUniforms","setDrawMode","LINE_STRIP","render","isWireframe","TRIANGLE_FAN","updateState","updateParams","updateGeometry","oldProps","regenerateModels","models","forEach","model","delete","_getModels","invalidateAll","changeFlags","geometryConfigChanged","dataChanged","updateTriggersChanged","all","polygons","object","data","push","polygonTesselator","_getPolygonTesselator","pointCount","updatePositions","use64bitPositions","updateAttributes","attributes","getChangedAttributes","clearChangedFlags","vertexCount","setVertexCount","setAttributes","setInstanceCount","newAttributes","attributeName","attribute","isInstanced","buffer","getBuffer","nextPositions","id","offset","nextPositions64xyLow","geometry","drawMode","TRIANGLES","vertexPositions","constant","Float32Array","isSideVertex","shaderCache","LINES","filter","bufferLayout","isFP64","polygonIndex","elevation","colors","key","getColor","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer} from '@deck.gl/core';\nimport GL from 'luma.gl/constants';\nimport {Model, Geometry, hasFeature, FEATURES} from 'luma.gl';\n\n// Polygon geometry generation is managed by the polygon tesselator\nimport {PolygonTesselator} from './polygon-tesselator';\n\nimport vs from './solid-polygon-layer-vertex.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  filled: true,\n  // Whether to extrude\n  extruded: false,\n  // Whether to draw a GL.LINES wireframe of the polygon\n  wireframe: false,\n  fp64: false,\n\n  // elevation multiplier\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // Accessor for polygon geometry\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Accessor for extrusion height\n  getElevation: {type: 'accessor', value: 1000},\n  // Accessor for colors\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // Optional settings for 'lighting' shader module\n  lightSettings: {}\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class SolidPolygonLayer extends Layer {\n  getShaders() {\n    const projectModule = this.use64bitProjection() ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'lighting', 'picking']};\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    this.setState({\n      numInstances: 0,\n      IndexType: hasFeature(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n    });\n\n    const attributeManager = this.getAttributeManager();\n    const noAlloc = true;\n\n    attributeManager.remove(['instancePickingColors']);\n\n    /* eslint-disable max-len */\n    attributeManager.add({\n      indices: {size: 1, isIndexed: true, update: this.calculateIndices, noAlloc},\n      positions: {\n        size: 3,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        update: this.calculatePositions,\n        noAlloc\n      },\n      positions64xyLow: {size: 2, update: this.calculatePositionsLow, noAlloc},\n      vertexValid: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        update: this.calculateVertexValid,\n        noAlloc\n      },\n      elevations: {\n        size: 1,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getElevation',\n        update: this.calculateElevations,\n        noAlloc\n      },\n      fillColors: {\n        alias: 'colors',\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getFillColor',\n        update: this.calculateFillColors,\n        defaultValue: DEFAULT_COLOR,\n        noAlloc\n      },\n      lineColors: {\n        alias: 'colors',\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getLineColor',\n        update: this.calculateLineColors,\n        defaultValue: DEFAULT_COLOR,\n        noAlloc\n      },\n      pickingColors: {size: 3, type: GL.UNSIGNED_BYTE, update: this.calculatePickingColors, noAlloc}\n    });\n    /* eslint-enable max-len */\n  }\n\n  draw({uniforms}) {\n    const {extruded, filled, wireframe, elevationScale} = this.props;\n    const {topModel, sideModel} = this.state;\n\n    const renderUniforms = Object.assign({}, uniforms, {\n      extruded: Boolean(extruded),\n      elevationScale\n    });\n\n    // Note: the order is important\n    if (sideModel) {\n      sideModel.setUniforms(renderUniforms);\n      if (wireframe) {\n        sideModel.setDrawMode(GL.LINE_STRIP);\n        sideModel.render({isWireframe: true});\n      }\n      if (filled) {\n        sideModel.setDrawMode(GL.TRIANGLE_FAN);\n        sideModel.render({isWireframe: false});\n      }\n    }\n    if (topModel) {\n      topModel.render(renderUniforms);\n    }\n  }\n\n  updateState(updateParams) {\n    super.updateState(updateParams);\n\n    this.updateGeometry(updateParams);\n\n    const {props, oldProps} = updateParams;\n    const attributeManager = this.getAttributeManager();\n\n    const regenerateModels =\n      props.fp64 !== oldProps.fp64 ||\n      props.filled !== oldProps.filled ||\n      props.extruded !== oldProps.extruded;\n\n    if (regenerateModels) {\n      if (this.state.models) {\n        this.state.models.forEach(model => model.delete());\n      }\n\n      this.setState(this._getModels(this.context.gl));\n      attributeManager.invalidateAll();\n    }\n  }\n\n  updateGeometry({props, oldProps, changeFlags}) {\n    const geometryConfigChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    // When the geometry config  or the data is changed,\n    // tessellator needs to be invoked\n    if (geometryConfigChanged) {\n      // TODO - avoid creating a temporary array here: let the tesselator iterate\n      const polygons = [];\n      for (const object of props.data) {\n        polygons.push(props.getPolygon(object));\n      }\n      const polygonTesselator = this._getPolygonTesselator(polygons, this.state.IndexType);\n\n      this.setState({\n        polygonTesselator,\n        numInstances: polygonTesselator.pointCount\n      });\n\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (\n      geometryConfigChanged ||\n      props.extruded !== oldProps.extruded ||\n      props.fp64 !== oldProps.fp64\n    ) {\n      this.state.polygonTesselator.updatePositions({\n        fp64: this.use64bitPositions(),\n        extruded: props.extruded\n      });\n    }\n  }\n\n  // \"Experimental\" method indended to make it easier to support non-nested arrays in subclasses\n  _getPolygonTesselator(polygons, IndexType) {\n    return new PolygonTesselator({polygons, IndexType: this.state.IndexType});\n  }\n\n  updateAttributes(props) {\n    super.updateAttributes(props);\n    const attributes = this.getAttributeManager().getChangedAttributes({clearChangedFlags: true});\n    const {topModel, sideModel, vertexCount, numInstances} = this.state;\n\n    if (topModel) {\n      topModel.setVertexCount(vertexCount);\n      topModel.setAttributes(attributes);\n    }\n    if (sideModel) {\n      // Remove one to account for the offset\n      sideModel.setInstanceCount(numInstances - 1);\n      const newAttributes = {};\n      for (const attributeName in attributes) {\n        const attribute = attributes[attributeName];\n\n        if (attributeName !== 'indices') {\n          // Apply layout override to the attribute.\n          newAttributes[attributeName] = Object.assign({}, attribute, {\n            isInstanced: true,\n            buffer: attribute.getBuffer()\n          });\n        }\n      }\n      if (newAttributes.positions) {\n        newAttributes.nextPositions = Object.assign(\n          {},\n          newAttributes.positions,\n          {id: 'nextPositions', offset: 12} // 1 vertex * 3 floats * 4 bits\n        );\n      }\n      if (newAttributes.positions64xyLow) {\n        newAttributes.nextPositions64xyLow = Object.assign(\n          {},\n          newAttributes.positions64xyLow,\n          {id: 'nextPositions64xyLow', offset: 8} // 1 vertex * 2 floats * 4 bits\n        );\n      }\n      sideModel.setAttributes(newAttributes);\n    }\n  }\n\n  _getModels(gl) {\n    const {id, filled, extruded} = this.props;\n\n    let topModel;\n    let sideModel;\n\n    if (filled) {\n      topModel = new Model(\n        gl,\n        Object.assign({}, this.getShaders(), {\n          id: `${id}-top`,\n          geometry: new Geometry({\n            drawMode: GL.TRIANGLES,\n            attributes: {\n              vertexPositions: {size: 2, constant: true, value: new Float32Array([0, 1])},\n              nextPositions: {size: 3, constant: true, value: new Float32Array(3)},\n              nextPositions64xyLow: {size: 2, constant: true, value: new Float32Array(2)}\n            }\n          }),\n          uniforms: {\n            isWireframe: false,\n            isSideVertex: false\n          },\n          vertexCount: 0,\n          isIndexed: true,\n          shaderCache: this.context.shaderCache\n        })\n      );\n    }\n    if (extruded) {\n      sideModel = new Model(\n        gl,\n        Object.assign({}, this.getShaders(), {\n          id: `${id}-side`,\n          geometry: new Geometry({\n            drawMode: GL.LINES,\n            vertexCount: 4,\n            attributes: {\n              // top right - top left - bootom left - bottom right\n              vertexPositions: {size: 2, value: new Float32Array([1, 1, 0, 1, 0, 0, 1, 0])}\n            }\n          }),\n          uniforms: {\n            isSideVertex: true\n          },\n          isInstanced: 1,\n          shaderCache: this.context.shaderCache\n        })\n      );\n    }\n\n    return {\n      models: [sideModel, topModel].filter(Boolean),\n      topModel,\n      sideModel\n    };\n  }\n\n  calculateIndices(attribute) {\n    attribute.value = this.state.polygonTesselator.indices();\n    const vertexCount = attribute.value.length / attribute.size;\n    this.setState({vertexCount});\n  }\n\n  calculatePositions(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n    attribute.value = polygonTesselator.positions();\n  }\n  calculatePositionsLow(attribute) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    attribute.value = this.state.polygonTesselator.positions64xyLow();\n  }\n\n  calculateVertexValid(attribute) {\n    attribute.value = this.state.polygonTesselator.vertexValid();\n  }\n\n  calculateElevations(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n\n    const {extruded, getElevation} = this.props;\n    if (extruded && typeof getElevation === 'function') {\n      attribute.constant = false;\n      attribute.value = polygonTesselator.elevations({\n        getElevation: polygonIndex => getElevation(this.props.data[polygonIndex])\n      });\n    } else {\n      const elevation = extruded ? getElevation : 0;\n      attribute.constant = true;\n      attribute.value = new Float32Array([elevation]);\n    }\n  }\n\n  calculateFillColors(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n    attribute.value = polygonTesselator.colors({\n      key: 'fillColors',\n      getColor: polygonIndex => this.props.getFillColor(this.props.data[polygonIndex])\n    });\n  }\n  calculateLineColors(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n    attribute.value = polygonTesselator.colors({\n      key: 'lineColors',\n      getColor: polygonIndex => this.props.getLineColor(this.props.data[polygonIndex])\n    });\n  }\n\n  // Override the default picking colors calculation\n  calculatePickingColors(attribute) {\n    attribute.value = this.state.polygonTesselator.pickingColors();\n  }\n}\n\nSolidPolygonLayer.layerName = 'SolidPolygonLayer';\nSolidPolygonLayer.defaultProps = defaultProps;\n"],"file":"solid-polygon-layer.js"}