{"version":3,"sources":["../../../src/controllers/orthographic-controller.js"],"names":["Controller","ViewState","Vector2","clamp","MOVEMENT_SPEED","DEFAULT_MIN_ZOOM","DEFAULT_MAX_ZOOM","OrthographicState","width","height","offset","zoom","minZoom","maxZoom","startPanPosition","startPanOffset","startRotatePosition","startRotateOffset","_interactiveState","pos","_viewportProps","_getUpdatedState","delta","subtract","deltaScaleX","deltaScaleY","scale","newZoom","centerX","centerY","dX","dY","add","newProps","Object","assign","OrthographicController","props","invertPan"],"mappings":"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","sourcesContent":["import Controller from './controller';\nimport ViewState from './view-state';\n\nimport {Vector2, clamp} from 'math.gl';\n\nconst MOVEMENT_SPEED = 10; // per keyboard click\n// TODO - make default unlimited in the next major version\nconst DEFAULT_MIN_ZOOM = 0.1;\nconst DEFAULT_MAX_ZOOM = 10;\n\nclass OrthographicState extends ViewState {\n  constructor({\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n    offset, // Offset to the origin\n    zoom, // Zoom level of the view\n    minZoom = DEFAULT_MIN_ZOOM,\n    maxZoom = DEFAULT_MAX_ZOOM,\n\n    /** Interaction states */\n    startPanPosition,\n    startPanOffset,\n    startRotatePosition,\n    startRotateOffset\n  }) {\n    super({\n      width,\n      height,\n      offset,\n      zoom,\n      minZoom,\n      maxZoom\n    });\n    this._interactiveState = {\n      startPanPosition,\n      startPanOffset,\n      startRotatePosition,\n      startRotateOffset\n    };\n  }\n\n  /* Public API */\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    const {offset} = this._viewportProps;\n    return this._getUpdatedState({\n      startPanPosition: pos,\n      startPanOffset: offset\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan({pos}) {\n    const {startPanPosition, startPanOffset} = this._interactiveState;\n    const delta = new Vector2(pos).subtract(startPanPosition);\n    return this._getUpdatedState({\n      offset: new Vector2(startPanOffset).subtract(delta)\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanPosition: null,\n      startPanOffset: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this;\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({deltaScaleX, deltaScaleY}) {\n    return this;\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this;\n  }\n\n  /**\n   * Zoom\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   * @param {[number, number]} pos - current mouse cursor screen position\n   */\n  zoom({pos, scale}) {\n    const {zoom, width, height, offset, minZoom, maxZoom} = this._viewportProps;\n    const newZoom = clamp(zoom * scale, minZoom, maxZoom);\n    const centerX = width / 2 - offset[0];\n    const centerY = height / 2 - offset[1];\n    const dX = (pos[0] - centerX) * (zoom / newZoom - 1);\n    const dY = (pos[1] - centerY) * (zoom / newZoom - 1);\n    return this._getUpdatedState({\n      zoom: newZoom,\n      offset: [offset[0] + dX, offset[1] + dY]\n    });\n  }\n\n  moveLeft() {\n    const {offset} = this._viewportProps;\n    const delta = [MOVEMENT_SPEED, 0];\n    return this._getUpdatedState({\n      offset: new Vector2(offset).add(delta)\n    });\n  }\n\n  moveRight() {\n    const {offset} = this._viewportProps;\n    const delta = [-MOVEMENT_SPEED, 0];\n    return this._getUpdatedState({\n      offset: new Vector2(offset).add(delta)\n    });\n  }\n\n  moveUp() {\n    const {offset} = this._viewportProps;\n    const delta = [0, MOVEMENT_SPEED];\n    return this._getUpdatedState({\n      offset: new Vector2(offset).add(delta)\n    });\n  }\n\n  moveDown() {\n    const {offset} = this._viewportProps;\n    const delta = [0, -MOVEMENT_SPEED];\n    return this._getUpdatedState({\n      offset: new Vector2(offset).add(delta)\n    });\n  }\n\n  /* Private methods */\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new OrthographicState(\n      Object.assign({}, this._viewportProps, this._interactiveState, newProps)\n    );\n  }\n}\n\nexport default class OrthographicController extends Controller {\n  constructor(props) {\n    super(OrthographicState, props);\n    this.invertPan = true;\n  }\n}\n"],"file":"orthographic-controller.js"}