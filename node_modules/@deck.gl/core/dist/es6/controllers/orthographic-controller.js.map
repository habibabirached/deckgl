{"version":3,"sources":["../../../src/controllers/orthographic-controller.js"],"names":["Controller","ViewState","Vector2","clamp","MOVEMENT_SPEED","DEFAULT_MIN_ZOOM","DEFAULT_MAX_ZOOM","OrthographicState","constructor","width","height","offset","zoom","minZoom","maxZoom","startPanPosition","startPanOffset","startRotatePosition","startRotateOffset","_interactiveState","getInteractiveState","panStart","pos","_viewportProps","_getUpdatedState","pan","delta","subtract","panEnd","rotateStart","rotate","deltaScaleX","deltaScaleY","rotateEnd","scale","newZoom","centerX","centerY","dX","dY","moveLeft","add","moveRight","moveUp","moveDown","newProps","Object","assign","OrthographicController","props","invertPan"],"mappings":"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","sourcesContent":["import Controller from './controller';\nimport ViewState from './view-state';\n\nimport {Vector2, clamp} from 'math.gl';\n\nconst MOVEMENT_SPEED = 10; // per keyboard click\n// TODO - make default unlimited in the next major version\nconst DEFAULT_MIN_ZOOM = 0.1;\nconst DEFAULT_MAX_ZOOM = 10;\n\nclass OrthographicState extends ViewState {\n  constructor({\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n    offset, // Offset to the origin\n    zoom, // Zoom level of the view\n    minZoom = DEFAULT_MIN_ZOOM,\n    maxZoom = DEFAULT_MAX_ZOOM,\n\n    /** Interaction states */\n    startPanPosition,\n    startPanOffset,\n    startRotatePosition,\n    startRotateOffset\n  }) {\n    super({\n      width,\n      height,\n      offset,\n      zoom,\n      minZoom,\n      maxZoom\n    });\n    this._interactiveState = {\n      startPanPosition,\n      startPanOffset,\n      startRotatePosition,\n      startRotateOffset\n    };\n  }\n\n  /* Public API */\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    const {offset} = this._viewportProps;\n    return this._getUpdatedState({\n      startPanPosition: pos,\n      startPanOffset: offset\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan({pos}) {\n    const {startPanPosition, startPanOffset} = this._interactiveState;\n    const delta = new Vector2(pos).subtract(startPanPosition);\n    return this._getUpdatedState({\n      offset: new Vector2(startPanOffset).subtract(delta)\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanPosition: null,\n      startPanOffset: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this;\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({deltaScaleX, deltaScaleY}) {\n    return this;\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this;\n  }\n\n  /**\n   * Zoom\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   * @param {[number, number]} pos - current mouse cursor screen position\n   */\n  zoom({pos, scale}) {\n    const {zoom, width, height, offset, minZoom, maxZoom} = this._viewportProps;\n    const newZoom = clamp(zoom * scale, minZoom, maxZoom);\n    const centerX = width / 2 - offset[0];\n    const centerY = height / 2 - offset[1];\n    const dX = (pos[0] - centerX) * (zoom / newZoom - 1);\n    const dY = (pos[1] - centerY) * (zoom / newZoom - 1);\n    return this._getUpdatedState({\n      zoom: newZoom,\n      offset: [offset[0] + dX, offset[1] + dY]\n    });\n  }\n\n  moveLeft() {\n    const {offset} = this._viewportProps;\n    const delta = [MOVEMENT_SPEED, 0];\n    return this._getUpdatedState({\n      offset: new Vector2(offset).add(delta)\n    });\n  }\n\n  moveRight() {\n    const {offset} = this._viewportProps;\n    const delta = [-MOVEMENT_SPEED, 0];\n    return this._getUpdatedState({\n      offset: new Vector2(offset).add(delta)\n    });\n  }\n\n  moveUp() {\n    const {offset} = this._viewportProps;\n    const delta = [0, MOVEMENT_SPEED];\n    return this._getUpdatedState({\n      offset: new Vector2(offset).add(delta)\n    });\n  }\n\n  moveDown() {\n    const {offset} = this._viewportProps;\n    const delta = [0, -MOVEMENT_SPEED];\n    return this._getUpdatedState({\n      offset: new Vector2(offset).add(delta)\n    });\n  }\n\n  /* Private methods */\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new OrthographicState(\n      Object.assign({}, this._viewportProps, this._interactiveState, newProps)\n    );\n  }\n}\n\nexport default class OrthographicController extends Controller {\n  constructor(props) {\n    super(OrthographicState, props);\n    this.invertPan = true;\n  }\n}\n"],"file":"orthographic-controller.js"}